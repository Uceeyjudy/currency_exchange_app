version: 2.1

jobs:
  build-frontend-client:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-client-build]
      - run:
          name: Build front-end Client
          command: |
            cd frontend/client
            rm package-lock.json
            npx npm-merge-driver install -g
            npm install
            npm run build
      - save_cache:
          paths: [frontend/client/node_modules]
          key: frontend-client-build

  build-frontend-admin:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-admin-build]
      - run:
          name: Build front-end admin
          command: |
            cd frontend/admin
            rm package-lock.json
            npm install
            npm run build
      - save_cache:
          paths: [frontend/admin/node_modules]
          key: frontend-admin-build

  build-backend:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
          #  exit 1
      - save_cache:
          paths: [backend/venv]
          key: backend-build

  test-frontend-client:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-client-build]
      - run:
          name: Test front-end Client
          command: |
            cd frontend/client
            rm package-lock.json
            npx npm-merge-driver install -g
            npm install
            npm run build
      - save_cache:
          paths: [frontend/client/node_modules]
          key: frontend-client-test
          
  test-frontend-admin:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-admin-build]
      # Your job code here
      - run:
          name: Test admin Frontend
          command: |
            cd frontend/admin/
            npm install
            npm run test
  test-backend:
    docker:
      # Docker image here
      - image: circleci/python:3.7
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Test Backend
          command: |
            cd backend
            . venv/bin/activate
            pip install -r requirements.txt
  build-frontend-client-docker-image:
    docker:
      # Docker image that supports docker
      - image: docker:17.05.0-ce-git
    steps:
      # Checkout code from git
      - checkout
      - setup_remote_docker
      # - run:
      #     name: Build docker image
      #     command: |
      #       cd frontend/client/

      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          # paths:
          #   - /caches/app.tar

      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            cd frontend/client/
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar

      - run:
          name: Push Image to docker hub
          command: |
            sudo docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
            sudo docker tag app judithezenwosu/frontend-client
            sudo docker push judithezenwosu/frontend-client:latest
  build-backend-docker-image:
    docker:
      # Docker image that supports docker
      - image: docker:17.05.0-ce-git
    steps:
      # Checkout code from git
      - checkout

      - setup_remote_docker

      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          # paths:
          #   - /caches/app.tar

      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            cd backend
            docker build --cache-from=app-be -t app-be .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app-be
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar

      - run:
          name: Push Image to docker hub
          command: |
            sudo docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
            sudo docker tag app-be judithezenwosu/backend
            sudo docker push judithezenwosu/backend:latest
  deploy-images:
    docker:
      # Docker image that supports docker
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0a:b6:f3:06:2a:5c:8a:f6:25:57:09:d0:4c:0d:52:19"]
      - run:
          name: Deploy
          command: |
            # SSH to the server to deploy
            # TODO Change to your username
            EC2_USERNAME=ubuntu
            EC2_PUBLIC_DNS=184.72.192.44
            ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_PUBLIC_DNS "/home/ubuntu/run.sh"


workflows:
  default:
    # testing
    jobs:
      - build-frontend-client
      # # - build-frontend-admin
      - build-backend
      - test-frontend-client
      # - test-frontend-admin
      - test-backend
      - build-frontend-client-docker-image:
          requires: [test-frontend-client] #remember to channge to test
          filters:
            branches:
              only: [main]

      - build-backend-docker-image:
          requires: [test-backend] #remember to channge to test
          filters:
            branches:
              only: [main]

      - deploy-images:
          requires:
            [
              build-frontend-client-docker-image,
              build-backend-client-docker-image,
            ]
